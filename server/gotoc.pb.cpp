// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gotoc.proto

#include "gotoc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gotocpb {
class MsgBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBody> _instance;
} _MsgBody_default_instance_;
class AddReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddReq> _instance;
} _AddReq_default_instance_;
class AddRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRsp> _instance;
} _AddRsp_default_instance_;
}  // namespace gotocpb
static void InitDefaultsscc_info_AddReq_gotoc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gotocpb::_AddReq_default_instance_;
    new (ptr) ::gotocpb::AddReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gotocpb::AddReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddReq_gotoc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddReq_gotoc_2eproto}, {}};

static void InitDefaultsscc_info_AddRsp_gotoc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gotocpb::_AddRsp_default_instance_;
    new (ptr) ::gotocpb::AddRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gotocpb::AddRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddRsp_gotoc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddRsp_gotoc_2eproto}, {}};

static void InitDefaultsscc_info_MsgBody_gotoc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gotocpb::_MsgBody_default_instance_;
    new (ptr) ::gotocpb::MsgBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gotocpb::MsgBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBody_gotoc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgBody_gotoc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gotoc_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gotoc_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gotoc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gotoc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gotocpb::MsgBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gotocpb::MsgBody, id_),
  PROTOBUF_FIELD_OFFSET(::gotocpb::MsgBody, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gotocpb::AddReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gotocpb::AddReq, num1_),
  PROTOBUF_FIELD_OFFSET(::gotocpb::AddReq, num2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gotocpb::AddRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gotocpb::AddRsp, sum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gotocpb::MsgBody)},
  { 7, -1, sizeof(::gotocpb::AddReq)},
  { 14, -1, sizeof(::gotocpb::AddRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gotocpb::_MsgBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gotocpb::_AddReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gotocpb::_AddRsp_default_instance_),
};

const char descriptor_table_protodef_gotoc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013gotoc.proto\022\007gotocpb\"3\n\007MsgBody\022\032\n\002ID\030"
  "\001 \001(\0162\016.gotocpb.CmdID\022\014\n\004Data\030\002 \001(\014\"$\n\006A"
  "ddReq\022\014\n\004Num1\030\001 \001(\017\022\014\n\004Num2\030\002 \001(\017\"\025\n\006Add"
  "Rsp\022\013\n\003Sum\030\001 \001(\017*!\n\005CmdID\022\013\n\007ADD_REQ\020\000\022\013"
  "\n\007ADD_RSP\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gotoc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gotoc_2eproto_sccs[3] = {
  &scc_info_AddReq_gotoc_2eproto.base,
  &scc_info_AddRsp_gotoc_2eproto.base,
  &scc_info_MsgBody_gotoc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gotoc_2eproto_once;
static bool descriptor_table_gotoc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gotoc_2eproto = {
  &descriptor_table_gotoc_2eproto_initialized, descriptor_table_protodef_gotoc_2eproto, "gotoc.proto", 179,
  &descriptor_table_gotoc_2eproto_once, descriptor_table_gotoc_2eproto_sccs, descriptor_table_gotoc_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_gotoc_2eproto::offsets,
  file_level_metadata_gotoc_2eproto, 3, file_level_enum_descriptors_gotoc_2eproto, file_level_service_descriptors_gotoc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gotoc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gotoc_2eproto), true);
namespace gotocpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gotoc_2eproto);
  return file_level_enum_descriptors_gotoc_2eproto[0];
}
bool CmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MsgBody::InitAsDefaultInstance() {
}
class MsgBody::_Internal {
 public:
};

MsgBody::MsgBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gotocpb.MsgBody)
}
MsgBody::MsgBody(const MsgBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:gotocpb.MsgBody)
}

void MsgBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBody_gotoc_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

MsgBody::~MsgBody() {
  // @@protoc_insertion_point(destructor:gotocpb.MsgBody)
  SharedDtor();
}

void MsgBody::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBody& MsgBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBody_gotoc_2eproto.base);
  return *internal_default_instance();
}


void MsgBody::Clear() {
// @@protoc_insertion_point(message_clear_start:gotocpb.MsgBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* MsgBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gotocpb.CmdID ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::gotocpb::CmdID>(val));
        } else goto handle_unusual;
        continue;
      // bytes Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gotocpb.MsgBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gotocpb.CmdID ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // bytes Data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gotocpb.MsgBody)
  return target;
}

size_t MsgBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gotocpb.MsgBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .gotocpb.CmdID ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gotocpb.MsgBody)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gotocpb.MsgBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gotocpb.MsgBody)
    MergeFrom(*source);
  }
}

void MsgBody::MergeFrom(const MsgBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gotocpb.MsgBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MsgBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gotocpb.MsgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBody::CopyFrom(const MsgBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gotocpb.MsgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBody::IsInitialized() const {
  return true;
}

void MsgBody::InternalSwap(MsgBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddReq::InitAsDefaultInstance() {
}
class AddReq::_Internal {
 public:
};

AddReq::AddReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gotocpb.AddReq)
}
AddReq::AddReq(const AddReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num1_, &from.num1_,
    static_cast<size_t>(reinterpret_cast<char*>(&num2_) -
    reinterpret_cast<char*>(&num1_)) + sizeof(num2_));
  // @@protoc_insertion_point(copy_constructor:gotocpb.AddReq)
}

void AddReq::SharedCtor() {
  ::memset(&num1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num2_) -
      reinterpret_cast<char*>(&num1_)) + sizeof(num2_));
}

AddReq::~AddReq() {
  // @@protoc_insertion_point(destructor:gotocpb.AddReq)
  SharedDtor();
}

void AddReq::SharedDtor() {
}

void AddReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddReq& AddReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddReq_gotoc_2eproto.base);
  return *internal_default_instance();
}


void AddReq::Clear() {
// @@protoc_insertion_point(message_clear_start:gotocpb.AddReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num2_) -
      reinterpret_cast<char*>(&num1_)) + sizeof(num2_));
  _internal_metadata_.Clear();
}

const char* AddReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sfixed32 Num1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          num1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // sfixed32 Num2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          num2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gotocpb.AddReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 Num1 = 1;
  if (this->num1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(1, this->_internal_num1(), target);
  }

  // sfixed32 Num2 = 2;
  if (this->num2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(2, this->_internal_num2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gotocpb.AddReq)
  return target;
}

size_t AddReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gotocpb.AddReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sfixed32 Num1 = 1;
  if (this->num1() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 Num2 = 2;
  if (this->num2() != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gotocpb.AddReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gotocpb.AddReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gotocpb.AddReq)
    MergeFrom(*source);
  }
}

void AddReq::MergeFrom(const AddReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gotocpb.AddReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num1() != 0) {
    _internal_set_num1(from._internal_num1());
  }
  if (from.num2() != 0) {
    _internal_set_num2(from._internal_num2());
  }
}

void AddReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gotocpb.AddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddReq::CopyFrom(const AddReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gotocpb.AddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReq::IsInitialized() const {
  return true;
}

void AddReq::InternalSwap(AddReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num1_, other->num1_);
  swap(num2_, other->num2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddRsp::InitAsDefaultInstance() {
}
class AddRsp::_Internal {
 public:
};

AddRsp::AddRsp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gotocpb.AddRsp)
}
AddRsp::AddRsp(const AddRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sum_ = from.sum_;
  // @@protoc_insertion_point(copy_constructor:gotocpb.AddRsp)
}

void AddRsp::SharedCtor() {
  sum_ = 0;
}

AddRsp::~AddRsp() {
  // @@protoc_insertion_point(destructor:gotocpb.AddRsp)
  SharedDtor();
}

void AddRsp::SharedDtor() {
}

void AddRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRsp& AddRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRsp_gotoc_2eproto.base);
  return *internal_default_instance();
}


void AddRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:gotocpb.AddRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sum_ = 0;
  _internal_metadata_.Clear();
}

const char* AddRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sfixed32 Sum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gotocpb.AddRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 Sum = 1;
  if (this->sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(1, this->_internal_sum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gotocpb.AddRsp)
  return target;
}

size_t AddRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gotocpb.AddRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sfixed32 Sum = 1;
  if (this->sum() != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gotocpb.AddRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gotocpb.AddRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gotocpb.AddRsp)
    MergeFrom(*source);
  }
}

void AddRsp::MergeFrom(const AddRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gotocpb.AddRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sum() != 0) {
    _internal_set_sum(from._internal_sum());
  }
}

void AddRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gotocpb.AddRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRsp::CopyFrom(const AddRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gotocpb.AddRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRsp::IsInitialized() const {
  return true;
}

void AddRsp::InternalSwap(AddRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sum_, other->sum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gotocpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gotocpb::MsgBody* Arena::CreateMaybeMessage< ::gotocpb::MsgBody >(Arena* arena) {
  return Arena::CreateInternal< ::gotocpb::MsgBody >(arena);
}
template<> PROTOBUF_NOINLINE ::gotocpb::AddReq* Arena::CreateMaybeMessage< ::gotocpb::AddReq >(Arena* arena) {
  return Arena::CreateInternal< ::gotocpb::AddReq >(arena);
}
template<> PROTOBUF_NOINLINE ::gotocpb::AddRsp* Arena::CreateMaybeMessage< ::gotocpb::AddRsp >(Arena* arena) {
  return Arena::CreateInternal< ::gotocpb::AddRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
