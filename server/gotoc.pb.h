// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gotoc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gotoc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gotoc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gotoc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gotoc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gotoc_2eproto;
namespace gotocpb {
class AddReq;
class AddReqDefaultTypeInternal;
extern AddReqDefaultTypeInternal _AddReq_default_instance_;
class AddRsp;
class AddRspDefaultTypeInternal;
extern AddRspDefaultTypeInternal _AddRsp_default_instance_;
class MsgBody;
class MsgBodyDefaultTypeInternal;
extern MsgBodyDefaultTypeInternal _MsgBody_default_instance_;
}  // namespace gotocpb
PROTOBUF_NAMESPACE_OPEN
template<> ::gotocpb::AddReq* Arena::CreateMaybeMessage<::gotocpb::AddReq>(Arena*);
template<> ::gotocpb::AddRsp* Arena::CreateMaybeMessage<::gotocpb::AddRsp>(Arena*);
template<> ::gotocpb::MsgBody* Arena::CreateMaybeMessage<::gotocpb::MsgBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gotocpb {

enum CmdID : int {
  ADD_REQ = 0,
  ADD_RSP = 1,
  CmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdID_IsValid(int value);
constexpr CmdID CmdID_MIN = ADD_REQ;
constexpr CmdID CmdID_MAX = ADD_RSP;
constexpr int CmdID_ARRAYSIZE = CmdID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdID_descriptor();
template<typename T>
inline const std::string& CmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdID_descriptor(), enum_t_value);
}
inline bool CmdID_Parse(
    const std::string& name, CmdID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdID>(
    CmdID_descriptor(), name, value);
}
// ===================================================================

class MsgBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gotocpb.MsgBody) */ {
 public:
  MsgBody();
  virtual ~MsgBody();

  MsgBody(const MsgBody& from);
  MsgBody(MsgBody&& from) noexcept
    : MsgBody() {
    *this = ::std::move(from);
  }

  inline MsgBody& operator=(const MsgBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBody& operator=(MsgBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgBody* internal_default_instance() {
    return reinterpret_cast<const MsgBody*>(
               &_MsgBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgBody& a, MsgBody& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBody* New() const final {
    return CreateMaybeMessage<MsgBody>(nullptr);
  }

  MsgBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBody& from);
  void MergeFrom(const MsgBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gotocpb.MsgBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gotoc_2eproto);
    return ::descriptor_table_gotoc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIDFieldNumber = 1,
  };
  // bytes Data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .gotocpb.CmdID ID = 1;
  void clear_id();
  ::gotocpb::CmdID id() const;
  void set_id(::gotocpb::CmdID value);
  private:
  ::gotocpb::CmdID _internal_id() const;
  void _internal_set_id(::gotocpb::CmdID value);
  public:

  // @@protoc_insertion_point(class_scope:gotocpb.MsgBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gotoc_2eproto;
};
// -------------------------------------------------------------------

class AddReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gotocpb.AddReq) */ {
 public:
  AddReq();
  virtual ~AddReq();

  AddReq(const AddReq& from);
  AddReq(AddReq&& from) noexcept
    : AddReq() {
    *this = ::std::move(from);
  }

  inline AddReq& operator=(const AddReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReq& operator=(AddReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReq* internal_default_instance() {
    return reinterpret_cast<const AddReq*>(
               &_AddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddReq& a, AddReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddReq* New() const final {
    return CreateMaybeMessage<AddReq>(nullptr);
  }

  AddReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddReq& from);
  void MergeFrom(const AddReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gotocpb.AddReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gotoc_2eproto);
    return ::descriptor_table_gotoc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNum1FieldNumber = 1,
    kNum2FieldNumber = 2,
  };
  // sfixed32 Num1 = 1;
  void clear_num1();
  ::PROTOBUF_NAMESPACE_ID::int32 num1() const;
  void set_num1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num1() const;
  void _internal_set_num1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed32 Num2 = 2;
  void clear_num2();
  ::PROTOBUF_NAMESPACE_ID::int32 num2() const;
  void set_num2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num2() const;
  void _internal_set_num2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gotocpb.AddReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 num1_;
  ::PROTOBUF_NAMESPACE_ID::int32 num2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gotoc_2eproto;
};
// -------------------------------------------------------------------

class AddRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gotocpb.AddRsp) */ {
 public:
  AddRsp();
  virtual ~AddRsp();

  AddRsp(const AddRsp& from);
  AddRsp(AddRsp&& from) noexcept
    : AddRsp() {
    *this = ::std::move(from);
  }

  inline AddRsp& operator=(const AddRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRsp& operator=(AddRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRsp* internal_default_instance() {
    return reinterpret_cast<const AddRsp*>(
               &_AddRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddRsp& a, AddRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRsp* New() const final {
    return CreateMaybeMessage<AddRsp>(nullptr);
  }

  AddRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRsp& from);
  void MergeFrom(const AddRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gotocpb.AddRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gotoc_2eproto);
    return ::descriptor_table_gotoc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSumFieldNumber = 1,
  };
  // sfixed32 Sum = 1;
  void clear_sum();
  ::PROTOBUF_NAMESPACE_ID::int32 sum() const;
  void set_sum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sum() const;
  void _internal_set_sum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gotocpb.AddRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gotoc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgBody

// .gotocpb.CmdID ID = 1;
inline void MsgBody::clear_id() {
  id_ = 0;
}
inline ::gotocpb::CmdID MsgBody::_internal_id() const {
  return static_cast< ::gotocpb::CmdID >(id_);
}
inline ::gotocpb::CmdID MsgBody::id() const {
  // @@protoc_insertion_point(field_get:gotocpb.MsgBody.ID)
  return _internal_id();
}
inline void MsgBody::_internal_set_id(::gotocpb::CmdID value) {
  
  id_ = value;
}
inline void MsgBody::set_id(::gotocpb::CmdID value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gotocpb.MsgBody.ID)
}

// bytes Data = 2;
inline void MsgBody::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgBody::data() const {
  // @@protoc_insertion_point(field_get:gotocpb.MsgBody.Data)
  return _internal_data();
}
inline void MsgBody::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:gotocpb.MsgBody.Data)
}
inline std::string* MsgBody::mutable_data() {
  // @@protoc_insertion_point(field_mutable:gotocpb.MsgBody.Data)
  return _internal_mutable_data();
}
inline const std::string& MsgBody::_internal_data() const {
  return data_.GetNoArena();
}
inline void MsgBody::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgBody::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gotocpb.MsgBody.Data)
}
inline void MsgBody::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gotocpb.MsgBody.Data)
}
inline void MsgBody::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gotocpb.MsgBody.Data)
}
inline std::string* MsgBody::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgBody::release_data() {
  // @@protoc_insertion_point(field_release:gotocpb.MsgBody.Data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgBody::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:gotocpb.MsgBody.Data)
}

// -------------------------------------------------------------------

// AddReq

// sfixed32 Num1 = 1;
inline void AddReq::clear_num1() {
  num1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddReq::_internal_num1() const {
  return num1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddReq::num1() const {
  // @@protoc_insertion_point(field_get:gotocpb.AddReq.Num1)
  return _internal_num1();
}
inline void AddReq::_internal_set_num1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num1_ = value;
}
inline void AddReq::set_num1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num1(value);
  // @@protoc_insertion_point(field_set:gotocpb.AddReq.Num1)
}

// sfixed32 Num2 = 2;
inline void AddReq::clear_num2() {
  num2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddReq::_internal_num2() const {
  return num2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddReq::num2() const {
  // @@protoc_insertion_point(field_get:gotocpb.AddReq.Num2)
  return _internal_num2();
}
inline void AddReq::_internal_set_num2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num2_ = value;
}
inline void AddReq::set_num2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num2(value);
  // @@protoc_insertion_point(field_set:gotocpb.AddReq.Num2)
}

// -------------------------------------------------------------------

// AddRsp

// sfixed32 Sum = 1;
inline void AddRsp::clear_sum() {
  sum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRsp::_internal_sum() const {
  return sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRsp::sum() const {
  // @@protoc_insertion_point(field_get:gotocpb.AddRsp.Sum)
  return _internal_sum();
}
inline void AddRsp::_internal_set_sum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sum_ = value;
}
inline void AddRsp::set_sum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:gotocpb.AddRsp.Sum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gotocpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gotocpb::CmdID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gotocpb::CmdID>() {
  return ::gotocpb::CmdID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gotoc_2eproto
